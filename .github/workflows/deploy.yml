name: Deploy to VPS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build front en CI (optionnel mais rapide côté serveur)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build assets (CI)
        run: |
          npm ci
          npm run build

      - name: Setup PHP (Composer in CI)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, bcmath, zip, curl, exif, intl
          tools: composer

      - name: Install PHP dependencies (CI)
        run: composer install --no-dev --prefer-dist --no-progress --no-interaction --optimize-autoloader

      # (optionnel) vérifier présence d'un .env chiffré suivi par git
      - name: Check encrypted env in repo (CI)
        run: |
          echo "[CI] Encrypted env files:"
          git ls-files | grep -E '(^|/)\.env(\.production)?\.encrypt(ed)?$' || echo "No encrypted env tracked."

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail

            APP_DIR="${{ secrets.APP_DIR }}"
            RELEASE="$(date +%Y%m%d%H%M%S)"
            RELEASE_DIR="$APP_DIR/releases/$RELEASE"
            SHARED_DIR="$APP_DIR/shared"

            echo "→ Ensure base folders"
            sudo mkdir -p "$APP_DIR/releases" \
                         "$SHARED_DIR/storage/app/public" \
                         "$SHARED_DIR/storage/framework/cache" \
                         "$SHARED_DIR/storage/framework/sessions" \
                         "$SHARED_DIR/storage/framework/views" \
                         "$SHARED_DIR/storage/logs" \
                         "$SHARED_DIR/bootstrap/cache"

            # Ownership & perms: web user = www-data (adapte si nginx/apache)
            sudo chown -R www-data:www-data "$SHARED_DIR"
            sudo chmod -R 775 "$SHARED_DIR"

            # ACL (si setfacl dispo) – partage accès avec l'user de déploiement
            if command -v setfacl >/dev/null 2>&1; then
              sudo setfacl -R -m u:${USER}:rwx,u:www-data:rwx "$SHARED_DIR" || true
              sudo setfacl -d -m u:${USER}:rwx,u:www-data:rwx "$SHARED_DIR" || true
            fi

            # Assurer le fichier de log utilisable
            sudo touch "$SHARED_DIR/storage/logs/laravel.log"
            sudo chown www-data:www-data "$SHARED_DIR/storage/logs/laravel.log"
            sudo chmod 664 "$SHARED_DIR/storage/logs/laravel.log"

            echo "→ Create release dir & fetch code"
            mkdir -p "$RELEASE_DIR"
            cd "$RELEASE_DIR"
            git clone https://github.com/${{ github.repository }} . --depth=1

            echo "→ Composer install (server)"
            composer install --no-dev --prefer-dist --no-progress --no-interaction --optimize-autoloader

            echo "→ Node build (server) if needed"
            if ! command -v npm >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            # Si tu veux re-builder côté serveur:
            npm ci
            npm run build

            echo "→ Link shared directories"
            ln -sfn "$SHARED_DIR/storage" "$RELEASE_DIR/storage"
            ln -sfn "$SHARED_DIR/bootstrap/cache" "$RELEASE_DIR/bootstrap/cache"

            echo "→ Handle .env (decrypt if needed)"
            if [ ! -f "$SHARED_DIR/.env" ] || [ ! -s "$SHARED_DIR/.env" ]; then
              export LARAVEL_ENV_ENCRYPTION_KEY="${{ secrets.ENV_DECRYPT_KEY }}"
              mapfile -t CANDIDATES < <(find . -maxdepth 4 -type f \( -name ".env.production.encrypted" -o -name ".env.encrypted" -o -name ".env.production.encrypt" \) -print || true)
              echo "Candidates: ${#CANDIDATES[@]}"
              if [ "${#CANDIDATES[@]}" -gt 0 ]; then
                ENC_FILE="${CANDIDATES[0]}"
                ENC_DIR="$(dirname "$ENC_FILE")"
                pushd "$ENC_DIR" >/dev/null
                  php artisan env:decrypt --env=production --key="${{ secrets.ENV_DECRYPT_KEY }}" --force \
                  || php artisan env:decrypt --env=production --force \
                  || php artisan env:decrypt --key="${{ secrets.ENV_DECRYPT_KEY }}" --force \
                  || php artisan env:decrypt --force
                  if [ -f ".env.production" ]; then
                    mv .env.production "$SHARED_DIR/.env"
                  elif [ -f ".env" ]; then
                    mv .env "$SHARED_DIR/.env"
                  else
                    echo "❌ .env file not produced after decrypt"; exit 1
                  fi
                popd >/dev/null
              else
                echo "⚠️ No encrypted env found; expecting SHARED_DIR/.env to exist."
              fi
              sudo chown www-data:www-data "$SHARED_DIR/.env" || true
              sudo chmod 640 "$SHARED_DIR/.env" || true
            fi

            echo "→ Symlink .env into release"
            ln -sfn "$SHARED_DIR/.env" "$RELEASE_DIR/.env"

            echo "→ Pre-flight: ensure index.php exists"
            if [ ! -f "$RELEASE_DIR/public/index.php" ]; then
              echo "❌ public/index.php missing"; exit 1
            fi

            echo "→ Optimize & migrate"
            php artisan config:clear || true
            php artisan view:clear || true
            php artisan route:clear || true

            # DB drivers (light sanity)
            if grep -q '^DB_CONNECTION=sqlite' "$SHARED_DIR/.env"; then
              mkdir -p "$SHARED_DIR/database"
              [ -f "$SHARED_DIR/database/database.sqlite" ] || sudo -u www-data install -m 664 -o www-data -g www-data /dev/null "$SHARED_DIR/database/database.sqlite"
            fi

            php artisan migrate --force
            php artisan config:cache
            php artisan event:cache || true
            php artisan storage:link || true

            echo "→ Switch current symlink"
            ln -sfn "$RELEASE_DIR" "$APP_DIR/current"
            echo "current -> $(readlink -f "$APP_DIR/current")"

            echo "→ Final permissions on release"
            sudo chown -R www-data:www-data "$RELEASE_DIR"
            sudo chmod -R 775 "$RELEASE_DIR"

            echo "→ Reload PHP-FPM & Nginx (if present)"
            sudo systemctl reload ${{ secrets.PHP_FPM_SERVICE }} || true
            sudo systemctl reload nginx || true

            echo "→ Restart queues"
            php artisan queue:restart || true
            if [ -n "${{ secrets.HORIZON_SERVICE }}" ]; then
              sudo systemctl restart "${{ secrets.HORIZON_SERVICE }}" || true
            fi

            echo "✅ Deployment complete"
