name: Deploy to VPS (NGINX)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  # Node LTS pour Vite/React (22.x)
  NODE_VERSION: "22"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        # v5 utilise runtime node24 côté runner (ok pour hosted runners récents). :contentReference[oaicite:0]{index=0}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        # Node 22 est LTS (Jod) depuis oct. 2024. :contentReference[oaicite:1]{index=1}

      - name: Install JS deps & build (Vite)
        run: |
          npm ci
          npm run build

      - name: List rsync excludes
        run: |
          cat > .rsyncignore <<'EOF'
          .git
          .github
          node_modules
          tests
          storage
          vendor
          .env
          *.md
          EOF

      - name: Start SSH agent with deploy key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        # Action maintenue, compatible Node 20+. :contentReference[oaicite:2]{index=2}

      - name: Add VPS host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Compute release name (timestamp)
        id: rel
        run: echo "name=$(date -u +%Y%m%d%H%M%S)" >> "$GITHUB_OUTPUT"

      - name: Rsync code to release dir on VPS
        run: |
          RSYNC_RSH="ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no"
          DEST="${{ secrets.APP_DIR }}/releases/${{ steps.rel.outputs.name }}/"
          rsync -az --mkpath --delete --exclude-from=.rsyncignore \
          -e "$RSYNC_RSH" ./ "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$DEST"

      - name: Run remote deploy script (composer, artisan, swap symlink)
        env:
          APP_DIR: ${{ secrets.APP_DIR }}
          RELEASE: ${{ steps.rel.outputs.name }}
          PHP_FPM: ${{ secrets.PHP_FPM_SERVICE }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "APP_DIR='$APP_DIR' RELEASE='$RELEASE' PHP_FPM='$PHP_FPM' bash -s" <<'EOSH'
          set -euo pipefail

          RELEASE_DIR="$APP_DIR/releases/$RELEASE"
          SHARED_DIR="$APP_DIR/shared"

          # Ensure shared links (.env & storage)
          if [ ! -f "$SHARED_DIR/.env" ]; then
            echo "Missing $SHARED_DIR/.env (create it once on the server)"; exit 1
          fi
          ln -sfn "$SHARED_DIR/.env" "$RELEASE_DIR/.env"
          rm -rf "$RELEASE_DIR/storage"
          ln -sfn "$SHARED_DIR/storage" "$RELEASE_DIR/storage"

          cd "$RELEASE_DIR"

          # Composer install sur le serveur (compatibilité PHP/extensions)
          composer install --no-dev --prefer-dist --optimize-autoloader --no-interaction

          # Optimiz & migrate
          php artisan key:generate --force || true
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan event:cache

          # Basculer la release -> current (atomique)
          ln -sfn "$RELEASE_DIR" "$APP_DIR/current"

          # Permissions
          chown -hR deploy:admin "$APP_DIR"
          find "$SHARED_DIR/storage" -type d -exec chmod 775 {} \;
          find "$SHARED_DIR/storage" -type f -exec chmod 664 {} \;

          # Reload services
          sudo systemctl reload "$PHP_FPM" || true
          sudo systemctl reload nginx || true

          # (Optionnel) redémarrer worker/horizon s’ils existent
          # sudo systemctl restart laravel-worker.service 2>/dev/null || true
          # sudo systemctl restart horizon.service 2>/dev/null || true
          EOSH
