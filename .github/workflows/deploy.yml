name: Deploy to VPS

on:
  push:
    branches: [ "main" ] # Déploiement automatique sur push vers main
  workflow_dispatch:      # Permet le déclenchement manuel

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js (pour React/Vite)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install JS dependencies & build assets
        run: |
          npm ci
          npm run build

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, bcmath, zip, curl, exif
          tools: composer

      - name: Install PHP dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Deploy via SSH (with decryption)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail

            APP_DIR="${{ secrets.APP_DIR }}"
            RELEASE=$(date +%Y%m%d%H%M%S)
            RELEASE_DIR="$APP_DIR/releases/$RELEASE"
            SHARED_DIR="$APP_DIR/shared"

            echo "→ Creating release folder..."
            mkdir -p "$RELEASE_DIR"
            cd "$RELEASE_DIR"

            echo "→ Cloning repository..."
            git clone https://github.com/${{ github.repository }} . --depth=1

            echo "→ Installing backend dependencies..."
            composer install --no-dev --optimize-autoloader

            echo "→ Installing frontend assets..."
            npm install && npm run build

            echo "→ Linking shared resources..."
            ln -sfn "$SHARED_DIR/storage" "$RELEASE_DIR/storage"
            ln -sfn "$SHARED_DIR/bootstrap/cache" "$RELEASE_DIR/bootstrap/cache"

            echo "→ Handling environment file..."
            if [ ! -f "$SHARED_DIR/.env" ]; then
              export LARAVEL_ENV_ENCRYPTION_KEY="${{ secrets.ENV_DECRYPT_KEY }}"

              if [ -f ".env.production.encrypted" ]; then
                echo "→ Decrypting production ..."
                php artisan env:decrypt --env=production --force
                mv .env.production "$SHARED_DIR/.env"
              elif [ -f ".env.encrypted" ]; then
                php artisan env:decrypt --force
                mv .env "$SHARED_DIR/.env"
              else
                echo "❌ Aucun fichier .env chiffré trouvé !"
                exit 1
              fi

              chmod 640 "$SHARED_DIR/.env"
            fi

            echo "→ Linking .env"
            ln -sfn "$SHARED_DIR/.env" "$RELEASE_DIR/.env"

            echo "→ Fixing permissions..."
            sudo chown -R www-data:www-data "$RELEASE_DIR"
            sudo chmod -R 775 "$RELEASE_DIR"

            echo "→ Running Laravel commands..."
            php artisan config:clear || true
            php artisan config:cache
            php artisan migrate --force

            echo "→ Updating current release..."
            ln -sfn "$RELEASE_DIR" "$APP_DIR/current"

            echo "→ Reloading PHP-FPM"
            sudo systemctl reload ${{ secrets.PHP_FPM_SERVICE }} || true

            echo "✅ Deployment complete!"
