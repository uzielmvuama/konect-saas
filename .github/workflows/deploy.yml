name: Deploy to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js (pour React/Vite)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install JS dependencies & build assets
        run: |
          npm ci
          npm run build

      - name: Setup PHP (composer côté runner)
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, bcmath, zip, curl, exif, intl
          tools: composer

      - name: Install PHP dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Check encrypted env in repo (CI-side)  # (optionnel)
        run: |
          echo "[CI] Listing encrypted env files tracked by git:"
          git ls-files | grep -E '(^|/)\.env(\.production)?\.encrypt(ed)?$' || (echo "❌ Aucun .env chiffré n'est suivi par git"; exit 1)

      - name: Deploy via SSH (with decryption + auto-structure)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail

            APP_DIR="${{ secrets.APP_DIR }}"
            RELEASE="$(date +%Y%m%d%H%M%S)"
            RELEASE_DIR="$APP_DIR/releases/$RELEASE"
            SHARED_DIR="$APP_DIR/shared"

            echo "→ Ensure base folders"
            if sudo -n true 2>/dev/null; then
              sudo mkdir -p "$APP_DIR/releases" "$SHARED_DIR/storage" "$SHARED_DIR/bootstrap/cache"
              sudo chown -R $USER:www-data "$APP_DIR" || true
              sudo chmod -R 775 "$APP_DIR" || true
            else
              mkdir -p "$APP_DIR/releases" "$SHARED_DIR/storage" "$SHARED_DIR/bootstrap/cache"
              chown -R "$USER":www-data "$APP_DIR" || true
              chmod -R 775 "$APP_DIR" || true
            fi

            echo "→ Create release dir & clone"
            mkdir -p "$RELEASE_DIR"
            cd "$RELEASE_DIR"
            git clone https://github.com/${{ github.repository }} . --depth=1

            # --- FIX VITE (1/3): Blade ne référence QUE le JS app.tsx ---
            # remplace @vite(['resources/css/app.css','resources/js/app.tsx']) par @vite(['resources/js/app.tsx'])
            if grep -q "@vite(['resources/css/app.css'" resources/views/app.blade.php 2>/dev/null; then
              sed -i "s#@vite(\['resources/css/app.css',\s*'resources/js/app.tsx'\])#@vite(['resources/js/app.tsx'])#g" resources/views/app.blade.php || true
              sed -i 's#@vite(\x27resources/css/app.css\x27,\s*\x27resources/js/app.tsx\x27)#@vite([\x27resources/js/app.tsx\x27])#g' resources/views/app.blade.php || true
            fi

            # --- FIX VITE (2/3): CSS importé depuis le JS ---
            if [ -f resources/js/app.tsx ] && ! grep -q "import '../css/app.css'" resources/js/app.tsx; then
              sed -i "1s#^#import '../css/app.css';\n#" resources/js/app.tsx
            fi

            echo "→ Composer install (server)"
            composer install --no-dev --optimize-autoloader

            echo "→ npm install & build (server)"
            if ! command -v npm >/dev/null 2>&1; then
              echo "Node/npm absent → installation rapide"
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - || true
              (sudo apt-get install -y nodejs || true)
            fi
            npm install
            npm run build

            # --- FIX VITE (3/3): sanity check manifest ---
            if [ -f public/build/manifest.json ]; then
              (grep -q '"resources/js/app.tsx"' public/build/manifest.json) || { echo "❌ Vite manifest ne contient pas resources/js/app.tsx"; exit 1; }
            else
              echo "❌ Vite manifest manquant (public/build/manifest.json)"; exit 1
            fi

            echo "→ Link shared storage & cache"
            ln -sfn "$SHARED_DIR/storage" "$RELEASE_DIR/storage"
            ln -sfn "$SHARED_DIR/bootstrap/cache" "$RELEASE_DIR/bootstrap/cache"

            echo "→ Handle .env (decrypt if needed)"
            if [ ! -f "$SHARED_DIR/.env" ] || [ ! -s "$SHARED_DIR/.env" ]; then
              export LARAVEL_ENV_ENCRYPTION_KEY="${{ secrets.ENV_DECRYPT_KEY }}"
              mapfile -t CANDIDATES < <(find . -maxdepth 4 -type f \( -name ".env.production.encrypted" -o -name ".env.production.encrypt" -o -name ".env.encrypted" \) -print 2>/dev/null)
              echo "→ Encrypted env candidates: ${#CANDIDATES[@]}"; printf '%s\n' "${CANDIDATES[@]:-}"
              [ "${#CANDIDATES[@]}" -gt 0 ] || { echo "❌ Aucun .env chiffré"; exit 1; }

              ENC_FILE="${CANDIDATES[0]}"; ENC_DIR="$(dirname "$ENC_FILE")"
              pushd "$ENC_DIR" >/dev/null
              if php artisan env:decrypt --env=production --key="${{ secrets.ENV_DECRYPT_KEY }}" --force 2>/dev/null; then :;
              elif php artisan env:decrypt --env=production --force 2>/dev/null; then :;
              elif php artisan env:decrypt --key="${{ secrets.ENV_DECRYPT_KEY }}" --force 2>/dev/null; then :;
              elif php artisan env:decrypt --force 2>/dev/null; then :;
              else
                echo "❌ Échec du déchiffrement (.env)"; popd >/dev/null; exit 1;
              fi
              if   [ -f ".env.production" ]; then mv .env.production "$SHARED_DIR/.env";
              elif [ -f ".env"           ]; then mv .env            "$SHARED_DIR/.env";
              else echo "❌ Déchiffrement ok mais .env absent"; popd >/dev/null; exit 1;
              fi
              popd >/dev/null
              chmod 640 "$SHARED_DIR/.env"
            fi

            # --- FIX APP_KEY: on garantit une clé valide (base64:...) ---
            if ! grep -q '^APP_KEY=base64:' "$SHARED_DIR/.env"; then
              if [ -n "${{ secrets.APP_KEY }}" ]; then
                echo "→ Inject APP_KEY depuis secrets"
                sed -i '/^APP_KEY=/d' "$SHARED_DIR/.env"
                printf 'APP_KEY=%s\n' "${{ secrets.APP_KEY }}" >> "$SHARED_DIR/.env"
              else
                echo "❌ APP_KEY manquant. Ajoute secrets.APP_KEY (base64:...) ou inclus-le dans ton .env chiffré."
                exit 1
              fi
              # Optionnel: forcer le cipher cohérent
              sed -i '/^APP_CIPHER=/d' "$SHARED_DIR/.env"
              echo 'APP_CIPHER=aes-256-cbc' >> "$SHARED_DIR/.env"
            fi

            echo "→ Link .env into release"
            ln -sfn "$SHARED_DIR/.env" "$RELEASE_DIR/.env"

            echo "→ Ensure DB driver before migrate (sqlite/mysql)"
            if grep -q '^DB_CONNECTION=sqlite' "$SHARED_DIR/.env"; then
              echo "→ sqlite"
              if sudo -n true 2>/dev/null; then
                sudo apt-get update -y
                (sudo apt-get install -y php8.4-sqlite3 || sudo apt-get install -y php-sqlite3) || true
              fi
              if ! grep -q '^DB_DATABASE=' "$SHARED_DIR/.env"; then
                echo "DB_DATABASE=$SHARED_DIR/database/database.sqlite" >> "$SHARED_DIR/.env"
              fi
              mkdir -p "$SHARED_DIR/database"
              [ -f "$SHARED_DIR/database/database.sqlite" ] || install -m 664 -o "$USER" -g www-data /dev/null "$SHARED_DIR/database/database.sqlite"
            elif grep -q '^DB_CONNECTION=mysql' "$SHARED_DIR/.env"; then
              echo "→ mysql"
              if sudo -n true 2>/dev/null; then
                sudo apt-get update -y
                (sudo apt-get install -y php8.4-mysql || sudo apt-get install -y php-mysql) || true
              fi
            fi

            echo "→ Permissions"
            if sudo -n true 2>/dev/null; then
              sudo chown -R www-data:www-data "$RELEASE_DIR"
              sudo chmod -R 775 "$RELEASE_DIR"
            else
              chown -R "$USER":www-data "$RELEASE_DIR" || true
              chmod -R 775 "$RELEASE_DIR" || true
            fi

            echo "→ Artisan caches & migrate"
            php artisan config:clear || true
            php artisan view:clear || true
            php artisan route:clear || true
            [ -f public/index.php ] || { echo "❌ public/index.php manquant"; exit 1; }
            php artisan migrate --force
            php artisan config:cache
            php artisan event:cache || true
            php artisan storage:link || true

            echo "→ Switch current symlink"
            ln -sfn "$RELEASE_DIR" "$APP_DIR/current"
            echo "→ current -> $(readlink -f "$APP_DIR/current")"
            ls -la "$APP_DIR/current/public/index.php" >/dev/null || { echo "❌ current/public/index.php introuvable"; exit 1; }

            echo "→ Reload services"
            if sudo -n true 2>/dev/null; then
              sudo systemctl reload ${{ secrets.PHP_FPM_SERVICE }} || true
              sudo systemctl reload nginx || true
            fi

            echo "✅ Deployment complete!"
